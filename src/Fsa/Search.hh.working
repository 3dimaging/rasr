#ifndef _FSA_SEARCH_HH
#define _FSA_SEARCH_HH

#include <Core/Application.hh>
#include <Core/Statistics.hh>
#include "Automaton.hh"
#include "Basic.hh"
#include "Output.hh"
#include "Stack.hh"
#include "Static.hh"
#include "Types.hh"
#include "Vector.hh"

namespace Fsa {

    /*
     * TODO:
     * - add time information to lattices
     * - collect garbage:
     *   - purge trace automaton
     * - histogram pruning?
     */
    class Search {
    private:
	typedef f32 Score;
	typedef u32 Time;
	typedef StateId Trace;

	class Slice {
	public:
	    static const StateTag StateTagTraceMerge = StateTagUser;

	private:
	    const StaticAutomaton *fsa_;
	    LabelId inputEpsilon_;
	    LabelId outputEpsilon_;
	    const Semiring *semiring_;

	    struct Token {
		StateId state_;
		Score score_;
		Trace trace_;
		Token() {}
		Token(StateId state, Score score, Trace trace) : state_(state), score_(score), trace_(trace) {}
	    };
	    typedef Stack<Token> TokenSet;

	    struct ExpandedToken {
		Score score_;
		Trace trace_;
		State *traceState_;
		ExpandedToken() : score_(Core::Type<Score>::max), traceState_(0) {}
		ExpandedToken(Score score, Trace trace) : score_(score), trace_(trace), traceState_(0) {}
	    };
	    typedef Vector<ExpandedToken> ExpandedTokens;

	    TokenSet tokens_;
	    Trace bestFinalTrace_;
	    StaticAutomaton *trace_;
	    ExpandedTokens expandedTokens_;
	    Score threshold_, minScore_;
	    Core::Statistics<u32> statesBeforePruning_, statesAfterPruning_;

	public:
	    Slice(const StaticAutomaton *fsa, StaticAutomaton *trace, Score threshold) :
		fsa_(fsa), inputEpsilon_(fsa->getInputAlphabet()->epsilon()), outputEpsilon_(fsa->getOutputAlphabet()->epsilon()),
		semiring_(fsa->semiring()), bestFinalTrace_(InvalidStateId), trace_(trace), expandedTokens_(fsa->maxStateId()),
                threshold_(threshold), statesBeforePruning_("states before pruning"), statesAfterPruning_("states after pruning") {}

	    void clear() {
		for (ExpandedTokens::iterator i = expandedTokens_.begin(); i != expandedTokens_.end(); ++i)
		    i->traceState_ = 0;
	    }
	    void start() {
		tokens_.clear();
		ConstStateRef initial = fsa_->getState(fsa_->initialStateId());
		if (initial) {
		    bestFinalTrace_ = InvalidStateId;
		    if (trace_) bestFinalTrace_ = trace_->newState(StateTagFinal)->id();
		    tokens_.push(Token(initial->id(), 0.0, bestFinalTrace_));
		}
		statesBeforePruning_.clear();
		statesAfterPruning_.clear();
	    }
	    size_t nTokens() const { return tokens_.size(); }

	    template <class Scorer> Score expand
	    (Slice &next, const Scorer &scorer, Time time, Vector<StateId> &expandedTokens) {
		Score minScore = Core::Type<Score>::max, minThreshold = Core::Type<Score>::max;
		bestFinalTrace_ = InvalidStateId;
		Score minFinalScore = Core::Type<Score>::max;
		while (!tokens_.isEmpty()) {
		    Token t = tokens_.pop();
		    const State *sp = fsa_->fastState(t.state_);
		    if (sp->isFinal()) {
			if (t.score_ + Score(sp->weight_) < minFinalScore) {
			    minFinalScore = t.score_ + Score(sp->weight_);
			    bestFinalTrace_ = t.trace_;
			}
			State *traceState = trace_->fastState(t.trace_ & StateIdMask);
			Score diffScore = t.score_ - Score(traceState->weight_);
			if (t.trace_ & StateTagTraceMerge) {
			    for (State::iterator a = traceState->begin(); a != traceState->end(); ++a)
				a->weight_ = Weight(f32(a->weight_) + diffScore);
			    t.trace_ &= ~StateTagTraceMerge;
			    traceState->setTags(traceState->tags() & ~StateTagTraceMerge);
			} else {
			    traceState = trace_->newState(StateTagNone, Weight(t.score_));
			    traceState->newArc(t.trace_ & StateIdMask, Weight(diffScore), outputEpsilon_);
			}
		    }
		    for (State::const_iterator a = sp->begin(); a != sp->end(); ++a) {
			Score score = t.score_ + Score(a->weight_);
			if (a->input_ != inputEpsilon_) score += scorer->score(a->input_);
			Trace trace = t.trace_;
			if (a->output_ != outputEpsilon_) {
			    Score diffScore = score - Score(trace_->fastState(trace & StateIdMask)->weight_);
			    State *traceState = expandedTokens_[a->target()].traceState_;
			    if (!traceState) {
				if (trace & StateTagTraceMerge) {
				    traceState = trace_->fastState(trace & StateIdMask);
				    for (State::iterator a = traceState->begin(); a != traceState->end(); ++a)
					a->weight_ = Weight(diffScore);
				} else {
				    traceState = trace_->newState(StateTagTraceMerge, Weight(diffScore));
				    traceState->newArc(trace & StateIdMask, Weight(diffScore), a->output());
				}
				expandedTokens_[a->target()].traceState_ = traceState;
			    } else {
				LabelId output = outputEpsilon_;
				if (!(trace & StateTagTraceMerge)) output = a->output();
				traceState->newArc(trace & StateIdMask, Weight(diffScore), output);
			    }
			    trace = traceState->id() | traceState->tags();
			}
			if (fsa_->fastState(a->target())->isFinal()) {
			    // merge hypotheses
			    if (t.score_ + Score(sp->weight_) < minFinalScore) {
				minFinalScore = t.score_ + Score(sp->weight_);
				bestFinalTrace_ = t.trace_;
			    }
			    State *traceState = trace_->fastState(t.trace_ & StateIdMask);
			    Score diffScore = t.score_ - Score(traceState->weight_);
			    if (t.trace_ & StateTagTraceMerge) {
				for (State::iterator a = traceState->begin(); a != traceState->end(); ++a)
				    a->weight_ = Weight(f32(a->weight_) + diffScore);
				t.trace_ &= ~StateTagTraceMerge;
				traceState->setTags(traceState->tags() & ~StateTagTraceMerge);
			    } else {
				traceState = trace_->newState(StateTagNone, Weight(t.score_));
				traceState->newArc(t.trace_ & StateIdMask, Weight(diffScore), outputEpsilon_);
			    }
			}
			if (a->input_ != inputEpsilon_) {
			    if (score < minThreshold) {
				if (score < minScore) {
				    minScore = score;
				    minThreshold = minScore + threshold_;
				}
				if (score < expandedTokens_[a->target()].score_) {
				    if (expandedTokens_[a->target()].score_ >= Core::Type<Score>::max)
					expandedTokens.push_back(a->target());
				    expandedTokens_[a->target()].score_ = score;
				    expandedTokens_[a->target()].trace_ = trace;
				}
			    }
			} else tokens_.push(Token(a->target(), score, trace));
		    }
		}
		return minThreshold;
	    }

	    void prune(Slice &next, const Vector<StateId> &expandedTokens, Score minThreshold) {
		next.statesBeforePruning_ = statesBeforePruning_;
		next.statesBeforePruning_ += expandedTokens.size();
		next.tokens_.clear();
		for (Vector<StateId>::const_iterator i = expandedTokens.begin(); i != expandedTokens.end(); ++i) {
		    if (expandedTokens_[*i].score_ < minThreshold)
			next.tokens_.push(Token(*i, expandedTokens_[*i].score_, expandedTokens_[*i].trace_));
		    expandedTokens_[*i].score_ = Core::Type<Score>::max;
		    expandedTokens_[*i].traceState_ = 0;
		}
		next.statesAfterPruning_ = statesAfterPruning_;
		next.statesAfterPruning_ += next.tokens_.size();
		next.minScore_ = minScore_;
	    }

	    void finalStates(Slice &next) {
		next.bestFinalTrace_ = InvalidStateId;
		Score minFinalScore = Core::Type<Score>::max;
		for (TokenSet::iterator t = next.tokens_.begin(); t != next.tokens_.end(); ++t) {
		    const State *sp = fsa_->fastState(t->state_);
		    if (sp->isFinal()) {
			if (t->score_ + Score(sp->weight_) < minFinalScore) {
			    minFinalScore = t->score_ + Score(sp->weight_);
			    bestFinalTrace_ = t->trace_;
			}
			State *traceState = trace_->fastState(t->trace_ & StateIdMask);
			Score diffScore = t->score_ - Score(traceState->weight_);
			if (t->trace_ & StateTagTraceMerge) {
			    for (State::iterator a = traceState->begin(); a != traceState->end(); ++a)
				a->weight_ = Weight(f32(a->weight_) + diffScore);
			    t->trace_ &= ~StateTagTraceMerge;
			    traceState->setTags(traceState->tags() & ~StateTagTraceMerge);
			} else {
			    traceState = trace_->newState(StateTagNone, Weight(t->score_));
			    traceState->newArc(t->trace_ & StateIdMask, Weight(diffScore), outputEpsilon_);
			}
		    }
		}
	    }

	    template <class Scorer> void pass(Slice &next, const Scorer &scorer, Time time) {
		Vector<StateId> expandedTokens;
		//finalStates(next);
		Score minThreshold = expand(next, scorer, time, expandedTokens);
		prune(next, expandedTokens, minThreshold);
	    }

	    Trace bestFinalTrace() const { return bestFinalTrace_; }
	    const Core::Statistics<u32>& statesBeforePruning() const { return statesBeforePruning_; }
	    const Core::Statistics<u32>& statesAfterPruning() const { return statesAfterPruning_; }
	};

	const StaticAutomaton *fsa_;
	u32 beamCount_;
	Score beamThreshold_;

	Time time_;
	StaticAutomaton *trace_;
	ConstAutomatonRef traceRef_;
	Slice slice0_, slice1_;
	Slice *old_, *new_;

    public:
	Search(const StaticAutomaton *fsa, Score beamThreshold) :
	    fsa_(fsa), beamThreshold_(beamThreshold), trace_(new StaticAutomaton()), traceRef_(trace_),
	    slice0_(fsa_, trace_, beamThreshold), slice1_(fsa_, trace_, beamThreshold) {
	    restart();
	};
	void restart() {
	    time_ = 0;
	    old_ = &slice0_;
	    new_ = &slice1_;
	    trace_->clear();
	    trace_->setType(TypeAcceptor);
	    trace_->setSemiring(SemiringTropical);
	    trace_->setInputAlphabet(fsa_->getOutputAlphabet());
	    old_->clear();
	    new_->clear();
	    old_->start();
	}
	template<class Scorer> void feed(const Scorer &scorer) {
	    old_->pass(*new_, scorer, time_++);
	    std::swap(old_, new_);
	}
	ConstAutomatonRef getPartialTraceback() { return ConstAutomatonRef(); }
	ConstAutomatonRef getCurrentWordLattice() {
	    Trace tracebackStateId = old_->bestFinalTrace();
	    if (tracebackStateId == InvalidStateId) {
		std::cerr << "cannot create word lattice: no active final trace." << std::endl;
		return ConstAutomatonRef();
	    }
	    return partial(traceRef_, tracebackStateId);
	}
	const Core::Statistics<u32>& statesBeforePruning() const { return old_->statesBeforePruning(); }
	const Core::Statistics<u32>& statesAfterPruning() const { return old_->statesAfterPruning(); }
    };

} // namespace Fsa

#endif // _FSA_SEARCH_HH
