<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
  Back-end feature processing of old the standard system.

  input: Mel-frequency cepstral coefficients 
	 (as generated by mfcc.standard_system.flow)

  Below you find examples of how to reproduce the following operations
  performed by the old standard system in the back-end (recognition /
  training):
  + cepstral mean normalization
  + variance normalization (optional)
  + energy normalization (some copora)
  + adding derivatives (optional finite differences / linear regression)
  + linear transform (i.e. LDA)
  This is not a working Flow file, but a collection of useful sniplets!
-->
<network name="backend">
  <in  name="mfcc"/>
  <out name="features"/>

  <!-- NORMALIZATION -->

  <!-- Cesptral mean substraction on complete segment -->
  <node name="normalization" filter="signal-normalization"
	length="infinite" right="infinite" type="mean-and-variance"
	/>
  <link from="backend:mfcc" to="normalization"/>

  <!-- Options:

     For normalization on a sliding window, set
	length="201" right="100"

     For variance normalization (dev_norm=1 in .rcf-file)
	 variance="true"
	     
     For energy normalization (#define NORM in Common_Config.h)
         level="0"
  -->

  <!-- If variance normalization is active, featues are scaled by
       VAR_SCALE_FACTOR, which is 1000 in most cases -->
  <node name="varscale" filter="generic-vector-f32-multiplication"
	value="1000"/>
  <link from="normalization" to="varscale"/>


   
  <!-- DERIVATIVES --> 

  <!-- Linear regression on five consecutive vectors.
       (linear_regression_mode = 1 in .rcf-file)
       #define RANGE_LINREG 2 -> length="5"  -->
  <node name="regression-window" filter="signal-delay" length="5"/>
  <link from="normalization" to="regression-window"/>

  <node name="delta" filter="signal-regression" order="1"/>
  <link from="regression-window:4" to="mfcc-delta:-2"/>
  <link from="regression-window:3" to="mfcc-delta:-1"/>
  <link from="regression-window:2" to="mfcc-delta:0"/>
  <link from="regression-window:1" to="mfcc-delta:+1"/>
  <link from="regression-window:0" to="mfcc-delta:+2"/>

  <node name="deltadelta" filter="signal-regression" order="2"/>
  <link from="regression-window:4" to="mfcc-deltadelta:-2"/>
  <link from="regression-window:3" to="mfcc-deltadelta:-1"/>
  <link from="regression-window:2" to="mfcc-deltadelta:0"/>
  <link from="regression-window:1" to="mfcc-deltadelta:+1"/>
  <link from="regression-window:0" to="mfcc-deltadelta:+2"/>

  <node name="deltadelta-split" filter="generic-vector-f32-split"/>
  <link from="deltadelta" to="deltadelta-split"/>

  <node name="mfcc+derivs" filter="generic-vector-f32-concat"/>
  <link from="regression-window:2" to="mfcc+derivs:mfcc"/>
  <link from="delta"               to="mfcc+derivs:delta-mfcc"/>
  <link from="deltadelta-split:0"  to="mfcc+derivs:deltadelta-energy"/>

  <!-- Derivatives with finite differences have not been tested. -->



  <!-- LDA -->
		
  <!-- LDA on three consecutive vectors
       (lda_window_length = 1 in .rcf-file) -->

  <node name="lda-delay" filter="signal-delay" length="3"/>
  <link from="mfcc+derivs" to="lda-delay"/>

  <node name="lda-window" filter="generic-vector-f32-concat"/>
  <link from="lda-delay:2" to="lda-window:-1"/>
  <link from="lda-delay:1" to="lda-window:0"/>
  <link from="lda-delay:0" to="lda-window:+1"/>

  <!-- 	LDA on seven consecutive vectors.
        (lda_window_length = 3 in .rcf-file) -->

  <node name="lda-delay" filter="signal-delay" length="7"/>
  <link from="normalization" to="delay"/>

  <node name="lda-window" filter="generic-vector-f32-concat"/>
  <link from="lda-delay:6" to="lda-window:-3"/>
  <link from="lda-delay:5" to="lda-window:-2"/>
  <link from="lda-delay:4" to="lda-window:-1"/>
  <link from="lda-delay:3" to="lda-window:0"/>
  <link from="lda-delay:2" to="lda-window:+1"/>
  <link from="lda-delay:1" to="lda-window:+2"/>
  <link from="lda-delay:0" to="lda-window:+3"/>

  <!-- Note: LDA input vector contains OLDEST FRAME FIRST and most
  recent frame last.  Necessary for compatibility with old standard
  system.  -->

  <node name="lda" filter="signal-matrix-multiplication-f32"/>
  <link from="lda-window" to="lda"/>


  
  <link from="lda" to="backend:features"/>

</network>
